openapi: 3.0.0
info:
  title: Health Check API
  version: "1.0.0"
paths:
  /api/v1/health:
    get:
      tags:
        - health
      description: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthRes"
  /api/v1/messages/{locationId}:
    get:
      tags:
        - messages
      description: Get message list
      parameters:
        - name: locationId
          in: path
          required: true
          description: The ID of the location to get messages for
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessageRes"
  /api/v1/spot/{spotId}/photo:
    get:
      summary: Retrieve a list of locations
      description: Retrieve a list of locations based on longitude, latitude
      parameters:
        - name: spotId
          in: path
          required: true
          description: The ID of the location.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
  /api/v1/spots:
    get:
      tags:
        - spots
      summary: Retrieve a list of locations
      description: Retrieve a list of locations based on longitude, latitude
      parameters:
        - name: longitude
          in: query
          required: true
          description: The longitude of the location.
          schema:
            type: number
            format: double
        - name: latitude
          in: query
          required: true
          description: The latitude of the location.
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessLocationRes"
  /api/v1/user/{userId}:
    get:
      tags:
        - user
      description: Get By ID
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of user
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessUserRes"
  /api/v1/login:
    post:
      tags:
        - auth
      description: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessLoginRes"
  /api/v1/signup:
    post:
      tags:
        - auth
      description: Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - email
                - username
                - password
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSignupRes"
  /api/v1/message:
    post:
      tags:
        - messages
      description: Post a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spotId:
                  type: string
                userId:
                  type: string
                photoUrl:
                  type: string
                content:
                  type: string
              required:
                - spotId
                - userId
                - photoUrl
                - content
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessageCreateRes"
  /api/v1/user/me:
    get:
      tags:
        - user
      description: Get current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessUserRes"
  /api/v1/message/stamp:
    post:
      tags:
        - messages
      description: Post a stamp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
                userId:
                  type: string
                stampType:
                  type: string
              required:
                  - messageId
                  - userId
                  - stampType
      responses:
        '201':
            description: Created
            content:
                application/json:
                  schema:
                      $ref: "#/components/schemas/SuccessStampRes"
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
  schemas:
    HealthRes:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: healthy
    SuccessStampRes:
      type : object
      properties:
        message:
          type: string
      required: [message]
    SuccessMessageRes:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              id:
                type: string # メッセージ ID
              author_name:
                type: string # メッセージの著者名
              content:
                type: string # メッセージの内容
              stamps:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    type:
                      type: string # スタンプの種類
                    count:
                      type: integer # スタンプのカウント
                    is_reacted:
                      type: boolean # ユーザーがスタンプを押したかどうか
                  required: [type, count, is_reacted]
                nullable: true
            required: [id, author_name, content] # messages 配列内の必須フィールド
      required: [messages] # SuccessMessageRes の必須フィールド
      example:
        messages:
          - id: 1
            author: "田中さくら"
            content: "桜の季節が来ました！公園で花見をするのが楽しみです。みんなでピクニックしましょう！"
            stamps:
              smile:
                count: 5
                is_reacted: true
              heart:
                count: 3
                is_reacted: false
          - id: 2
            author: "佐藤健太"
            content: "今朝、公園でジョギングしていたら、きれいな朝日を見ました。心が洗われる思いでした。"
            stamps:
              smile:
                count: 5
                is_reacted: true
          - id: 3
            author: "鈴木美咲"
            content: "子供たちと遊具で遊んだ後、芝生の上でお弁当。休日の過ごし方として最高です！"
            stamps:
              smile:
                count: 5
                is_reacted: true
    SuccessLocationRes:
      type: object
      properties:
        spots:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/Spot"
    SuccessUserRes:
      properties:
        userId:
          type: string
        username:
          type: string
        email:
          type: string
      required: [userId, username, email]
    SuccessLoginRes:
      properties:
        userId:
          type: string
      required: [userId]
    SuccessSignupRes:
      properties:
        userId:
          type: string
      required: [userId]
    ErrorRes:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: error message
    SuccessMessageCreateRes:
      type: object
      properties:
        messageId:
          type: string
        spotId:
          type: string
        userId:
          type: string
        content:
          type: string
        photoUrl:
          type: string
      required: [messageId, spotId, userId, content, photoUrl]
    Spot:
      type: object
      properties:
        spot_id:
          type: string
        google_map_id:
          type: string
        google_map_place_id:
          type: string
        name:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        address:
          type: string
        types:
          type: array
          items:
            type: string
        photo_url:
          type: string
      required:
        - spot_id
        - google_map_place_id
        - name
        - latitude
        - longitude
        - address
        - types
        - photo_url
        - google_map_id
      example:
        spot_id: "spot123"
        google_map_place_id: "ChIJN1t_tDeuEmsRUsoyG83frY4"
        name: "Beautiful Park"
        description: "A quiet park with lovely scenery and walking paths."
        latitude: 35.6895
        longitude: 139.6917
        address: "2 Chome-1-1 Otemachi, Chiyoda City, Tokyo 100-0004, Japan"
        types: ["park"]
        photo_url: "https://example.com/photo.jpg"
