// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/svc/pkg/domain"
)

func newGmPlace(db *gorm.DB, opts ...gen.DOOption) gmPlace {
	_gmPlace := gmPlace{}

	_gmPlace.gmPlaceDo.UseDB(db, opts...)
	_gmPlace.gmPlaceDo.UseModel(&domain.GmPlace{})

	tableName := _gmPlace.gmPlaceDo.TableName()
	_gmPlace.ALL = field.NewAsterisk(tableName)
	_gmPlace.ID = field.NewString(tableName, "id")
	_gmPlace.PlaceID = field.NewString(tableName, "place_id")
	_gmPlace.Name = field.NewString(tableName, "name")
	_gmPlace.FormattedAddress = field.NewString(tableName, "formatted_address")
	_gmPlace.Icon = field.NewString(tableName, "icon")
	_gmPlace.Rating = field.NewFloat32(tableName, "rating")
	_gmPlace.UserRatingsTotal = field.NewInt32(tableName, "user_ratings_total")
	_gmPlace.PriceLevel = field.NewInt32(tableName, "price_level")
	_gmPlace.Vicinity = field.NewString(tableName, "vicinity")
	_gmPlace.PermanentlyClosed = field.NewBool(tableName, "permanently_closed")
	_gmPlace.BusinessStatus = field.NewString(tableName, "business_status")
	_gmPlace.LocationLatitude = field.NewFloat64(tableName, "location_latitude")
	_gmPlace.LocationLongitude = field.NewFloat64(tableName, "location_longitude")
	_gmPlace.Types = field.NewString(tableName, "types")
	_gmPlace.CreatedAt = field.NewTime(tableName, "created_at")

	_gmPlace.fillFieldMap()

	return _gmPlace
}

type gmPlace struct {
	gmPlaceDo

	ALL               field.Asterisk
	ID                field.String
	PlaceID           field.String
	Name              field.String
	FormattedAddress  field.String
	Icon              field.String
	Rating            field.Float32
	UserRatingsTotal  field.Int32
	PriceLevel        field.Int32
	Vicinity          field.String
	PermanentlyClosed field.Bool
	BusinessStatus    field.String
	LocationLatitude  field.Float64
	LocationLongitude field.Float64
	Types             field.String
	CreatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (g gmPlace) Table(newTableName string) *gmPlace {
	g.gmPlaceDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gmPlace) As(alias string) *gmPlace {
	g.gmPlaceDo.DO = *(g.gmPlaceDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gmPlace) updateTableName(table string) *gmPlace {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.PlaceID = field.NewString(table, "place_id")
	g.Name = field.NewString(table, "name")
	g.FormattedAddress = field.NewString(table, "formatted_address")
	g.Icon = field.NewString(table, "icon")
	g.Rating = field.NewFloat32(table, "rating")
	g.UserRatingsTotal = field.NewInt32(table, "user_ratings_total")
	g.PriceLevel = field.NewInt32(table, "price_level")
	g.Vicinity = field.NewString(table, "vicinity")
	g.PermanentlyClosed = field.NewBool(table, "permanently_closed")
	g.BusinessStatus = field.NewString(table, "business_status")
	g.LocationLatitude = field.NewFloat64(table, "location_latitude")
	g.LocationLongitude = field.NewFloat64(table, "location_longitude")
	g.Types = field.NewString(table, "types")
	g.CreatedAt = field.NewTime(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *gmPlace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gmPlace) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 15)
	g.fieldMap["id"] = g.ID
	g.fieldMap["place_id"] = g.PlaceID
	g.fieldMap["name"] = g.Name
	g.fieldMap["formatted_address"] = g.FormattedAddress
	g.fieldMap["icon"] = g.Icon
	g.fieldMap["rating"] = g.Rating
	g.fieldMap["user_ratings_total"] = g.UserRatingsTotal
	g.fieldMap["price_level"] = g.PriceLevel
	g.fieldMap["vicinity"] = g.Vicinity
	g.fieldMap["permanently_closed"] = g.PermanentlyClosed
	g.fieldMap["business_status"] = g.BusinessStatus
	g.fieldMap["location_latitude"] = g.LocationLatitude
	g.fieldMap["location_longitude"] = g.LocationLongitude
	g.fieldMap["types"] = g.Types
	g.fieldMap["created_at"] = g.CreatedAt
}

func (g gmPlace) clone(db *gorm.DB) gmPlace {
	g.gmPlaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gmPlace) replaceDB(db *gorm.DB) gmPlace {
	g.gmPlaceDo.ReplaceDB(db)
	return g
}

type gmPlaceDo struct{ gen.DO }

type IGmPlaceDo interface {
	gen.SubQuery
	Debug() IGmPlaceDo
	WithContext(ctx context.Context) IGmPlaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGmPlaceDo
	WriteDB() IGmPlaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGmPlaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGmPlaceDo
	Not(conds ...gen.Condition) IGmPlaceDo
	Or(conds ...gen.Condition) IGmPlaceDo
	Select(conds ...field.Expr) IGmPlaceDo
	Where(conds ...gen.Condition) IGmPlaceDo
	Order(conds ...field.Expr) IGmPlaceDo
	Distinct(cols ...field.Expr) IGmPlaceDo
	Omit(cols ...field.Expr) IGmPlaceDo
	Join(table schema.Tabler, on ...field.Expr) IGmPlaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGmPlaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGmPlaceDo
	Group(cols ...field.Expr) IGmPlaceDo
	Having(conds ...gen.Condition) IGmPlaceDo
	Limit(limit int) IGmPlaceDo
	Offset(offset int) IGmPlaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGmPlaceDo
	Unscoped() IGmPlaceDo
	Create(values ...*domain.GmPlace) error
	CreateInBatches(values []*domain.GmPlace, batchSize int) error
	Save(values ...*domain.GmPlace) error
	First() (*domain.GmPlace, error)
	Take() (*domain.GmPlace, error)
	Last() (*domain.GmPlace, error)
	Find() ([]*domain.GmPlace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.GmPlace, err error)
	FindInBatches(result *[]*domain.GmPlace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.GmPlace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGmPlaceDo
	Assign(attrs ...field.AssignExpr) IGmPlaceDo
	Joins(fields ...field.RelationField) IGmPlaceDo
	Preload(fields ...field.RelationField) IGmPlaceDo
	FirstOrInit() (*domain.GmPlace, error)
	FirstOrCreate() (*domain.GmPlace, error)
	FindByPage(offset int, limit int) (result []*domain.GmPlace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGmPlaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gmPlaceDo) Debug() IGmPlaceDo {
	return g.withDO(g.DO.Debug())
}

func (g gmPlaceDo) WithContext(ctx context.Context) IGmPlaceDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gmPlaceDo) ReadDB() IGmPlaceDo {
	return g.Clauses(dbresolver.Read)
}

func (g gmPlaceDo) WriteDB() IGmPlaceDo {
	return g.Clauses(dbresolver.Write)
}

func (g gmPlaceDo) Session(config *gorm.Session) IGmPlaceDo {
	return g.withDO(g.DO.Session(config))
}

func (g gmPlaceDo) Clauses(conds ...clause.Expression) IGmPlaceDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gmPlaceDo) Returning(value interface{}, columns ...string) IGmPlaceDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gmPlaceDo) Not(conds ...gen.Condition) IGmPlaceDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gmPlaceDo) Or(conds ...gen.Condition) IGmPlaceDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gmPlaceDo) Select(conds ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gmPlaceDo) Where(conds ...gen.Condition) IGmPlaceDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gmPlaceDo) Order(conds ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gmPlaceDo) Distinct(cols ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gmPlaceDo) Omit(cols ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gmPlaceDo) Join(table schema.Tabler, on ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gmPlaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gmPlaceDo) RightJoin(table schema.Tabler, on ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gmPlaceDo) Group(cols ...field.Expr) IGmPlaceDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gmPlaceDo) Having(conds ...gen.Condition) IGmPlaceDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gmPlaceDo) Limit(limit int) IGmPlaceDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gmPlaceDo) Offset(offset int) IGmPlaceDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gmPlaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGmPlaceDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gmPlaceDo) Unscoped() IGmPlaceDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gmPlaceDo) Create(values ...*domain.GmPlace) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gmPlaceDo) CreateInBatches(values []*domain.GmPlace, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gmPlaceDo) Save(values ...*domain.GmPlace) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gmPlaceDo) First() (*domain.GmPlace, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlace), nil
	}
}

func (g gmPlaceDo) Take() (*domain.GmPlace, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlace), nil
	}
}

func (g gmPlaceDo) Last() (*domain.GmPlace, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlace), nil
	}
}

func (g gmPlaceDo) Find() ([]*domain.GmPlace, error) {
	result, err := g.DO.Find()
	return result.([]*domain.GmPlace), err
}

func (g gmPlaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.GmPlace, err error) {
	buf := make([]*domain.GmPlace, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gmPlaceDo) FindInBatches(result *[]*domain.GmPlace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gmPlaceDo) Attrs(attrs ...field.AssignExpr) IGmPlaceDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gmPlaceDo) Assign(attrs ...field.AssignExpr) IGmPlaceDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gmPlaceDo) Joins(fields ...field.RelationField) IGmPlaceDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gmPlaceDo) Preload(fields ...field.RelationField) IGmPlaceDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gmPlaceDo) FirstOrInit() (*domain.GmPlace, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlace), nil
	}
}

func (g gmPlaceDo) FirstOrCreate() (*domain.GmPlace, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlace), nil
	}
}

func (g gmPlaceDo) FindByPage(offset int, limit int) (result []*domain.GmPlace, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gmPlaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gmPlaceDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gmPlaceDo) Delete(models ...*domain.GmPlace) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gmPlaceDo) withDO(do gen.Dao) *gmPlaceDo {
	g.DO = *do.(*gen.DO)
	return g
}
