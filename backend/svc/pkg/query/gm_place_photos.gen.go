// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/svc/pkg/domain"
)

func newGmPlacePhoto(db *gorm.DB, opts ...gen.DOOption) gmPlacePhoto {
	_gmPlacePhoto := gmPlacePhoto{}

	_gmPlacePhoto.gmPlacePhotoDo.UseDB(db, opts...)
	_gmPlacePhoto.gmPlacePhotoDo.UseModel(&domain.GmPlacePhoto{})

	tableName := _gmPlacePhoto.gmPlacePhotoDo.TableName()
	_gmPlacePhoto.ALL = field.NewAsterisk(tableName)
	_gmPlacePhoto.ID = field.NewInt32(tableName, "id")
	_gmPlacePhoto.GmPlaceID = field.NewString(tableName, "gm_place_id")
	_gmPlacePhoto.PhotoReference = field.NewString(tableName, "photo_reference")
	_gmPlacePhoto.Height = field.NewInt32(tableName, "height")
	_gmPlacePhoto.Width = field.NewInt32(tableName, "width")

	_gmPlacePhoto.fillFieldMap()

	return _gmPlacePhoto
}

type gmPlacePhoto struct {
	gmPlacePhotoDo

	ALL            field.Asterisk
	ID             field.Int32
	GmPlaceID      field.String
	PhotoReference field.String
	Height         field.Int32
	Width          field.Int32

	fieldMap map[string]field.Expr
}

func (g gmPlacePhoto) Table(newTableName string) *gmPlacePhoto {
	g.gmPlacePhotoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gmPlacePhoto) As(alias string) *gmPlacePhoto {
	g.gmPlacePhotoDo.DO = *(g.gmPlacePhotoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gmPlacePhoto) updateTableName(table string) *gmPlacePhoto {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.GmPlaceID = field.NewString(table, "gm_place_id")
	g.PhotoReference = field.NewString(table, "photo_reference")
	g.Height = field.NewInt32(table, "height")
	g.Width = field.NewInt32(table, "width")

	g.fillFieldMap()

	return g
}

func (g *gmPlacePhoto) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gmPlacePhoto) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["gm_place_id"] = g.GmPlaceID
	g.fieldMap["photo_reference"] = g.PhotoReference
	g.fieldMap["height"] = g.Height
	g.fieldMap["width"] = g.Width
}

func (g gmPlacePhoto) clone(db *gorm.DB) gmPlacePhoto {
	g.gmPlacePhotoDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gmPlacePhoto) replaceDB(db *gorm.DB) gmPlacePhoto {
	g.gmPlacePhotoDo.ReplaceDB(db)
	return g
}

type gmPlacePhotoDo struct{ gen.DO }

type IGmPlacePhotoDo interface {
	gen.SubQuery
	Debug() IGmPlacePhotoDo
	WithContext(ctx context.Context) IGmPlacePhotoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGmPlacePhotoDo
	WriteDB() IGmPlacePhotoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGmPlacePhotoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGmPlacePhotoDo
	Not(conds ...gen.Condition) IGmPlacePhotoDo
	Or(conds ...gen.Condition) IGmPlacePhotoDo
	Select(conds ...field.Expr) IGmPlacePhotoDo
	Where(conds ...gen.Condition) IGmPlacePhotoDo
	Order(conds ...field.Expr) IGmPlacePhotoDo
	Distinct(cols ...field.Expr) IGmPlacePhotoDo
	Omit(cols ...field.Expr) IGmPlacePhotoDo
	Join(table schema.Tabler, on ...field.Expr) IGmPlacePhotoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGmPlacePhotoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGmPlacePhotoDo
	Group(cols ...field.Expr) IGmPlacePhotoDo
	Having(conds ...gen.Condition) IGmPlacePhotoDo
	Limit(limit int) IGmPlacePhotoDo
	Offset(offset int) IGmPlacePhotoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGmPlacePhotoDo
	Unscoped() IGmPlacePhotoDo
	Create(values ...*domain.GmPlacePhoto) error
	CreateInBatches(values []*domain.GmPlacePhoto, batchSize int) error
	Save(values ...*domain.GmPlacePhoto) error
	First() (*domain.GmPlacePhoto, error)
	Take() (*domain.GmPlacePhoto, error)
	Last() (*domain.GmPlacePhoto, error)
	Find() ([]*domain.GmPlacePhoto, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.GmPlacePhoto, err error)
	FindInBatches(result *[]*domain.GmPlacePhoto, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.GmPlacePhoto) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGmPlacePhotoDo
	Assign(attrs ...field.AssignExpr) IGmPlacePhotoDo
	Joins(fields ...field.RelationField) IGmPlacePhotoDo
	Preload(fields ...field.RelationField) IGmPlacePhotoDo
	FirstOrInit() (*domain.GmPlacePhoto, error)
	FirstOrCreate() (*domain.GmPlacePhoto, error)
	FindByPage(offset int, limit int) (result []*domain.GmPlacePhoto, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGmPlacePhotoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gmPlacePhotoDo) Debug() IGmPlacePhotoDo {
	return g.withDO(g.DO.Debug())
}

func (g gmPlacePhotoDo) WithContext(ctx context.Context) IGmPlacePhotoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gmPlacePhotoDo) ReadDB() IGmPlacePhotoDo {
	return g.Clauses(dbresolver.Read)
}

func (g gmPlacePhotoDo) WriteDB() IGmPlacePhotoDo {
	return g.Clauses(dbresolver.Write)
}

func (g gmPlacePhotoDo) Session(config *gorm.Session) IGmPlacePhotoDo {
	return g.withDO(g.DO.Session(config))
}

func (g gmPlacePhotoDo) Clauses(conds ...clause.Expression) IGmPlacePhotoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gmPlacePhotoDo) Returning(value interface{}, columns ...string) IGmPlacePhotoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gmPlacePhotoDo) Not(conds ...gen.Condition) IGmPlacePhotoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gmPlacePhotoDo) Or(conds ...gen.Condition) IGmPlacePhotoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gmPlacePhotoDo) Select(conds ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gmPlacePhotoDo) Where(conds ...gen.Condition) IGmPlacePhotoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gmPlacePhotoDo) Order(conds ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gmPlacePhotoDo) Distinct(cols ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gmPlacePhotoDo) Omit(cols ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gmPlacePhotoDo) Join(table schema.Tabler, on ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gmPlacePhotoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gmPlacePhotoDo) RightJoin(table schema.Tabler, on ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gmPlacePhotoDo) Group(cols ...field.Expr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gmPlacePhotoDo) Having(conds ...gen.Condition) IGmPlacePhotoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gmPlacePhotoDo) Limit(limit int) IGmPlacePhotoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gmPlacePhotoDo) Offset(offset int) IGmPlacePhotoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gmPlacePhotoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGmPlacePhotoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gmPlacePhotoDo) Unscoped() IGmPlacePhotoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gmPlacePhotoDo) Create(values ...*domain.GmPlacePhoto) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gmPlacePhotoDo) CreateInBatches(values []*domain.GmPlacePhoto, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gmPlacePhotoDo) Save(values ...*domain.GmPlacePhoto) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gmPlacePhotoDo) First() (*domain.GmPlacePhoto, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlacePhoto), nil
	}
}

func (g gmPlacePhotoDo) Take() (*domain.GmPlacePhoto, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlacePhoto), nil
	}
}

func (g gmPlacePhotoDo) Last() (*domain.GmPlacePhoto, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlacePhoto), nil
	}
}

func (g gmPlacePhotoDo) Find() ([]*domain.GmPlacePhoto, error) {
	result, err := g.DO.Find()
	return result.([]*domain.GmPlacePhoto), err
}

func (g gmPlacePhotoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.GmPlacePhoto, err error) {
	buf := make([]*domain.GmPlacePhoto, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gmPlacePhotoDo) FindInBatches(result *[]*domain.GmPlacePhoto, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gmPlacePhotoDo) Attrs(attrs ...field.AssignExpr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gmPlacePhotoDo) Assign(attrs ...field.AssignExpr) IGmPlacePhotoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gmPlacePhotoDo) Joins(fields ...field.RelationField) IGmPlacePhotoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gmPlacePhotoDo) Preload(fields ...field.RelationField) IGmPlacePhotoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gmPlacePhotoDo) FirstOrInit() (*domain.GmPlacePhoto, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlacePhoto), nil
	}
}

func (g gmPlacePhotoDo) FirstOrCreate() (*domain.GmPlacePhoto, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.GmPlacePhoto), nil
	}
}

func (g gmPlacePhotoDo) FindByPage(offset int, limit int) (result []*domain.GmPlacePhoto, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gmPlacePhotoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gmPlacePhotoDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gmPlacePhotoDo) Delete(models ...*domain.GmPlacePhoto) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gmPlacePhotoDo) withDO(do gen.Dao) *gmPlacePhotoDo {
	g.DO = *do.(*gen.DO)
	return g
}
